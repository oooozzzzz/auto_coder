// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model Template {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  version     Int      @default(1)
  category    String?
  fileId      String
  thumbnailId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  lastModifiedBy String
  
  placeholders Placeholder[]
  metadata    TemplateMetadata?
  tags        Tag[]
  
  @@map("templates")
}

model Placeholder {
  id           String   @id @default(cuid())
  templateId   String
  template     Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  name         String
  displayName  String
  type         String   // TEXT, NUMBER, DATE, IMAGE, TABLE, RICH_TEXT, BOOLEAN
  defaultValue String?
  required     Boolean  @default(false)
  description  String?
  format       String?
  isCustom     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  options      Option[]
  validationRules ValidationRule[]
  
  @@map("placeholders")
}

model Option {
  id            String   @id @default(cuid())
  placeholderId String
  placeholder   Placeholder @relation(fields: [placeholderId], references: [id], onDelete: Cascade)
  value         String
  createdAt     DateTime @default(now())
  
  @@map("options")
}

model ValidationRule {
  id            String   @id @default(cuid())
  placeholderId String
  placeholder   Placeholder @relation(fields: [placeholderId], references: [id], onDelete: Cascade)
  type          String   // MIN, MAX, PATTERN, REQUIRED, EMAIL, URL
  value         String?
  message       String
  createdAt     DateTime @default(now())
  
  @@map("validation_rules")
}

model TemplateMetadata {
  id           String   @id @default(cuid())
  templateId   String   @unique
  template     Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  wordCount    Int
  pageCount    Int
  fileSize     Int
  createdWith  String
  lastOpened   DateTime
  usedAddins   String   // JSON string array
  compatibility String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  variables    TemplateVariable[]
  
  @@map("template_metadata")
}

model TemplateVariable {
  id           String   @id @default(cuid())
  metadataId   String
  metadata     TemplateMetadata @relation(fields: [metadataId], references: [id], onDelete: Cascade)
  name         String
  type         String
  occurrences  Int
  contexts     String   // JSON string array
  createdAt    DateTime @default(now())
  
  @@map("template_variables")
}

model Tag {
  id          String   @id @default(cuid())
  templateId  String
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  value       String
  createdAt   DateTime @default(now())
  
  @@map("tags")
}